<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACkAAABiAAAAhgAAAIoAAABuAAAAOAAAAAkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIBAQGPDxsf3yZIUvo2ZnT/OGp4/ytSXf0VJyzqAwUGqgAA
        ADoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5Bw4QzTNgbf9kvNX/cdfz/3fh/P955P//d+H+/2jF
        3/8/d4f/Dxwh5gAAAF8AAAACAAAAAAAAAAAAAAABAAAAMAAAAE8AAABOAAAATgAAAE4AAABOAAAATgAA
        AE4AAABOAAAATgAAAE4AAABOAAAATgAAAE4AAABNAAAAWggPEdJGhJb/d+H9/2O60f8lRE3/PHB//3Xe
        +f9w1e//M19r/yxSXf9JjKL/ESMp7AAAAFAAAAAAAAAAAAAAABIEBATEIh4i/iklKfspJSn7KSUp+ykl
        KfspJSn7KSUp+yklKfspJSn7KSUp+yklKfspJSn7KSUp+yYiJvsIBwj8OWx6/3fg/P955v//RoWX/wsI
        Cf8THiL/Wae+/0+Vqf8OEhT/DQ0P/1ajt/9Mlq7/Bg0QzAAAABoAAAAAAAAAFw0MDdJzaXP/joKO/4yB
        jP+MgIz/jICM/4yBjP+MgIz/jICM/4yAjP+MgIz/jICM/4yBjP+Ogo7/bmNt/x0tMv9pxuD/eOP//3fh
        //81ZHL/ChIU/xEgJf8XLTP/Fisx/xAeI/8XKzD/XK3E/3Pc+/8jR1b9AAAAZQAAAAAAAAAQBAQEuiEe
        IfUnJCf4Kygr/zIvMf8sKSz/Kygq/zIvMP8yLzD/Mi8w/zIvMP8tKSv/Kygr/zMwMv8dGhv/Ml5q/3fi
        //934f//d+D+/zRib/8OGRv/Gy4t/xotLP8aLSz/Giws/y5XYv9u0ez/eeX//0SHn/8BAgOoAAAABAAA
        AAAAAAAhAAAANgAAAJJTU1H/vr26/2RjYv9VT0j/xbeo/8O1pv/Dtab/x7ak/2xgUv9PTk3/u7q3/0hH
        Rv9DgZL/eeX//3fh//955f//UJiu/yw5HP+PtE3/k7lQ/5O5UP+Osk3/LTwf/1Oftf965///VqnG/wcO
        EskAAAARAAAAAAAAAAAAAAAAAAAAc21sa//6+PX/g4OB/29oX///8d3//+/b///v2///8Nn/jX5t/2hn
        Zv/29PH/XFta/0aImv955f//d+H//3jk//86b4D/W3Ix/8j9b//G+27/xvtu/8j9b/9bczH/Om+A/3rm
        //9asM7/CBIWzwAAABUAAAAAAAAAAAAAAAAAAABzbGtq//f18v+CgYD/b2de///u2v/+7Nj//uzY///t
        1v+NfGz/ZmZl//Xz8P9ta2n/PHSD/3nk//934f//dNv4/yVES/9uijn/q9he/6jUXP+o1Fz/q9he/22I
        OP8lRU3/dd78/1Gfu/8ECgy/AAAADAAAAAAAAAAAAAAAAAAAAHNsa2r/9/Xy/4KBgP9vZ17//+7a//7s
        2P/+7Nj//+3W/418bP9mZmX/9/Xy/5uYlv8oSVL/dNz4/3jj//9nwtz/EyMn/x4vJv8lOi3/JTkt/yU5
        Lf8lOS3/HzAn/yRETf9w1fL/OHCE/wAAAJAHEBMAAAAAAAAAAAAAAAAAAAAAc2xrav/39fL/goGA/29n
        Xv//7tr//uzY//7s2P//7db/jXxs/2ZmZf/18+//1tTR/zI5Ov9YqL7/TI+h/x44QP8iQUn/ZcDb/2jF
        4f9oxeH/aMXh/2jF4f9oxeH/btDs/2bF4v8VKzTyAAAAQwAAAAAAAAAAAAAAAAAAAAAAAABzbGtq//f1
        8v+CgYD/b2de///u2v/+7Nj//uzY///t1v+NfGz/ZmZl//Px7v/x7+z/cG5t/x05Qf9TnrP/TpOn/2G4
        z/944///eOP//3jj//944///eOP//3nk//9z2/f/MF9w/wABAZ4AAAAHAAAAAAAAAAAAAAAAAAAAAAAA
        AHNsa2r/9/Xy/4KBgP9vZ17//+7a//7s2P/+7Nj//+3W/418bP9mZmX/9vTw/8PCv/8wLy3/JiMg/yhK
        VP9mwtv/eub//3nk//944v//eOL//3jj//955f//bdDr/zRldf8ECArAAAAAIAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAc2xrav/39fL/goGA/29nXv//7tr//uzY//7s2P//7db/jXxs/2ZmZf/39fL/pqWj/0tG
        Qf/fz77/enBm/yMyNf86coL/W7DI/2rJ5P9ry+b/YbnS/0eIm/8dNz/4AgQFqAAAACMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABzbGtq//f18v+CgYD/b2de///u2v/+7Nj//uzY///t1v+NfGz/ZmZl//f1
        8v+mpaP/UEpE//rp1f/76tf/wbKj/2hgWP84Ozn/Ii8x/xsqL/8tNTf/FxgY/wAAAIwAAAAKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHNsa2r/9/Xy/4KBgP9sZFz/++nW//nn1P/559T//ejS/4p6
        av9mZmX/9/Xy/6alo/9OSUP/9OLP//ro1P/86tb/+OfT/+rWwv+AcWL/SklI/8S/v/9VU1P/AAAAagAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAc2xrav/39fL/m5qY/yspJv9QS0X/UEtF/1BL
        Rf9RS0T/MCsm/4GAfv/39fL/u7m3/ywqKP9OSUP/UEtF/1BLRf9QS0X/U0xF/zQvKf9ycG//3NfX/1lX
        V/8AAABqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzbWxr//b08f/n5eP/srGv/6Sj
        of+lpKL/pqWj/6empP+urav/4d/c//Lw7f/s6uf/u7m3/6alo/+npqT/pqWj/6Wkov+lpKL/rKup/9nW
        1P/b1tb/WVdX/wAAAGoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHNdXFv/1tTR/+ro
        5f/39fL/9vPw//f18v/p5+P/1tXQ/9/e2v/y8O3/8vDt//Px7v/z8e7/39zZ/9bU0f/p5+T/9/Xy//Xz
        8P/49vL/5OLf/766uf9NS0r/AAAAagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAQIDuhUf
        I/8pNTr/SktL/7WzsP/u7On/nJuY/z08Qv8mJDn/Li06/3Bvbf/d29j/2tjV/2xraf8vNzr/KDU6/0BC
        Q/+hn53/7+3q/7CvrP9GRUj/JCI2/xEQIP8AAAK0AAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgUL
        DcYwY3n/VK/W/1Wz3P83d5P/KDI2/2hnZP8cGjn/Ni2p/0k93v9BNsn/HRhb/05NTf9KSkr/JE5g/0+n
        zf9Wtd//P4em/yAxOP9paGX/JCI1/zAnlv9IPNv/RjvT/ycgc/8EAwvAAAAAGgAAAAAAAAAAAAAAAAAA
        AAAAAABzJEtc/2DI9v9jzv3/Y878/2PP/f81bob/BQQM/zowrf9VR/7/VEb6/1VH/P9MQOT/Eg00/xgy
        O/9cvur/ZM/+/2PN/P9k0P//QYin/wUIC/8vJ43/VUf8/1RG+v9URvv/UUTx/xwYVP4AAABrAAAAAAAA
        AAAAAAAAAAAAAAAAAJ0SJi7/IURT/yBCUf8gQlH/IUNS/xgzPf8FBg3/GBRH/xsXUf8bF1D/GxdQ/xwX
        Uf8LCB//Dh0i/yBDUv8gQlH/IEJR/yBDUv8cOkb/BQgN/xYSP/8bF1H/GxdQ/xsXUP8cGFL/Dwwr/wAA
        AJYAAAEAAAAAAAAAAAAAAAAAAAAAYhEhJftMkKP/Upyw/1Kbr/9SnLD/TZGk/xUjLf87NIX/Tkaw/01F
        rv9NRa7/Tkaw/yQfUv8qUFn/U52y/1Kbr/9Sm6//U52y/zxzgf8VFi//SUGm/01Frv9NRa7/TUWv/0Y/
        n/8ODSD5AAAAWwAAAAAAAAAAAAAAAAAAAAAAAAATBgsNwlGZrP976P//eeX//3nl//944/3/LFNe/0Q7
        mf9zaP//cWb//3Fm//9yZ///NS54/z11gP976P//eeX//3nl//976f//RYOR/ywoZP9xZv7/cWb//3Fm
        //9yZ///SEGk/wQECrsAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbID1F+HDU7/934v//d+H//3nl
        //9Eg5L/KyZh/29k/f9vZP7/b2T+/3Bl//80LXf/PHOA/3nk//934f//d+H//3bf/P8rUFv/Qzua/3Fm
        //9vZP7/cGX//2dd6/8bGD72AAAAUwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8EBwi7S46h/3nk
        //934f//eOT//12yx/8cIUD/Zlvp/3Bk//9vZP7/cGX//zQtd/88c4D/eeT//3fh//944v//a8vl/xwt
        Pv9aUM7/cGX//29k/v9wZf//QzyY/wMCBrMAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AFMdNj72btDr/3ji//944v//b9Lt/x40Qv9US8H/cGX//29k/v9wZf//NC13/zxzgP955P//d+H//3nk
        //9Xp7r/HyFG/2le8P9vZP//cGX//2Vb5v8YFjfzAAAASwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAADAMFBrNHh5j/eub//3nk//955P//MV1o/z01jP9zZv//cWX//3Jm//81Lnj/PXWA/3vn
        //955P//euf//z53g/8xK3D/cmb//3Fl//9yZv//PzmQ/wEBA6sAAAAJAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAASRQlKvE6bn3/PHGA/z1zgv8hP0b/FhQz/zgyf/84Mn//OTOB/xoX
        PP8eOkH/PXOC/zxxgP88cYD/Fiow/yAcSv85M4H/ODJ//zYwev8RDyfuAAAAQgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAaAAAAJEAAACPAAAAjwAAAI8AAACPAAAAjwAA
        AI8AAACPAAAAjwAAAI8AAACPAAAAjwAAAI8AAACPAAAAjwAAAI8AAACPAAAAkQAAAGQAAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///gH///wAf//4ADAAAAAwAAAAEAAAABAAAAAIAAAADgAAAA4AAAAOAA
        AAHgAAAB4AAAAeAAAAPgAAAH4AAAD+AAAB/gAAAf4AAAH+AAAB/AAAAPgAAAB4AAAAeAAAAHgAAAB4AA
        AAfAAAAPwAAAD+AAAB/gAAAf8AAAP/AAAD8=
</value>
  </data>
</root>